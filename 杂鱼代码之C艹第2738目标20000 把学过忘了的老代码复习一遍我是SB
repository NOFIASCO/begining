#pragma once
#include <iostream>
using namespace std;
template<class T>
class MyArray
{
public:
	MyArray(int capacity);
	MyArray(const MyArray& arr);
	void Push_Back(const T& val);
	void Pop_Back();
	void ShowArr();
	~MyArray();	
	T& operator[](int index)
	{
		return this->Address[index];
	}
	int GetCapacity()
	{
		return this->Capacity;
	}
	int GetSize()
	{
		return this->Size;
	}
	MyArray& operator= (const MyArray& arr)
	{
		if (this->Address != nullptr)
		{
			delete[]this->Address;
			this->Address = nullptr;
			this->Capacity = 0;
			this->Size = 0;
		}
		this->Address = new T[arr.Capacity];
		this->Capacity = arr.Capacity;
		this->Size = arr.Size;
		for (int i = 0; i < this->Capacity; i++)
		{
			this->Address[i] = arr.Address[i];
		}
		//cout << "等号重载调用" << endl;
		return *this;
	}
private:
	T* Address;
	int Capacity;
	int Size;
};
template<class T>
void MyArray<T>::ShowArr()
{
	for (int i = 0; i < this->GetSize(); i++)
	{
		cout << this->Address[i] << " ";
	}
}
template<class T>
void MyArray<T>::Pop_Back()
{
	if (this->Size == 0)
	{
		return;
	}
	//delete this->Address[this->Size];//最好是进行逻辑删除保证数据可逆，物理删除在一些条件下并不适合，代码人对数据删除应当谨慎！特别是物理删除。
	this->Size--;
}
template<class T>
void MyArray<T>::Push_Back(const T& val)
{
	if (this->Size == this->Capacity)
	{
		return;
	}
	this->Address[this->Size] = val;
	this->Size++;
}
template<class T>
MyArray<T>::MyArray(int capacity)
{
	this->Capacity = capacity;
	this->Size = 0;
	this->Address = new T[this->Capacity];
	//cout << "有参构造调用" << endl;
}
template<class T>
MyArray<T>::MyArray(const MyArray& arr)
{
	if (arr.Address!=nullptr)
	{
		for (int i = 0; i < this->Capacity; i++)
		{
			this->Address[i] = arr.Address[i];
		}
		this->Capacity = arr.Capacity;
		this->Size = arr.Size;
	}
	this->Address = new T[arr.Capacity];
	this->Capacity = arr.Capacity;
	this->Size = arr.Size;
	//cout << "拷贝构造调用" << endl;
}
template<class T>
MyArray<T>::~MyArray()
{
	if (this->Address != nullptr)
	{
		delete[]this->Address;
		this->Address = nullptr;
	}
	//cout << "析构函数调用" << endl;
}
class person
{
public:
	//void ShowThis(const person& person)
	//{
	//		cout << person.m_Name << " " << person.m_Age << endl;
	//	/*cout << person.m_Name << " " << person.m_Age << endl;*/
	//}
	person() {};
	person(string name, int age)
	{
		this->m_Age = age;
		this->m_Name = name;
	}
	string m_Name;
	int m_Age;
};
void ArrPrint(MyArray<person>& arr)
{
	for (int i = 0; i < arr.GetSize(); i++)
	{
		cout << arr[i].m_Name << " " << arr[i].m_Age << endl;
	}
}
#include <iostream>
using namespace std;
#include <string>
#include <fstream>
#include "MyArry.hpp"
#include <vector>
void test()
{

	person p1("asasa", 10);
	person p6("aasa", 20);
	person p2("asa", 30);
	person p3("sa", 40);
	person p4("aa", 50);
	person p5("a", 60);
	//MyArray<int>arr1(5);
	//MyArray<int>arr2(arr1);
	MyArray<int>arr3(100);
	MyArray<person>arr2(100);
	//arr2 = arr3;
	arr2.Push_Back(p1);
	arr2.Push_Back(p6);
	arr2.Push_Back(p2);
	arr2.Push_Back(p3);
	arr2.Push_Back(p4);
	arr2.Push_Back(p5);
	arr2.Pop_Back();
	ArrPrint(arr2);
	cout << arr2.GetSize() << endl;
	cout << arr2.GetCapacity() << endl;
	for (int i = 0; i < 10; i++)
	{
		arr3.Push_Back(i);
	}
	arr3.Pop_Back();
	arr3.ShowArr();
	cout << arr3.GetSize() << endl;
	cout << arr3.GetCapacity() << endl;
}
int main()
{
	vector<int>v;
	v.begin();
	test();
	system("pause");
}
//template <class T>
//class Base
//{
//public:
//	T M;
//};
//template<class T1,class T2>
//class son :public Base<T1>
//{
//public:
//	son(string m, int v)
//	{
//		this->M = m;
//		this->V = v;
//	}
//	T2 V;
//};
//void tesy()
//{
//	son<string, int>s("asasas", 10);
//	cout << s.M << s.V << endl;
//}
//int main()
//{
//	tesy();
//}
//template<class PersonType,class AgeType>
//class Person
//{
//public:
//	Person(PersonType name,AgeType age)
//	{
//		this->m_Name = name;
//		this->m_Age = age;
//	}
//	void showthis()
//	{
//		cout << this->m_Age << this->m_Name << endl;
//	}
//	PersonType m_Name;
//	AgeType m_Age;
//};
//void test()
//{
//	Person<string,int> p("sa",100);
//	p.showthis();
//}
//int main()
//{
//	test();
//}
//class calulate
//{
//public:
//	virtual int GetResult()
//	{
//		return 0;
//	}
//	int m_Num1;
//	int m_Num2;
//};
//class Add :public calulate
//{
//public:
//	int GetResult()
//	{
//		return m_Num1 + m_Num2;
//	}
//};
//class Sub :public calulate
//{
//public:
//	int GetResult()
//	{
//		return m_Num1 - m_Num2;
//	}
//};
//void test()
//{
//	calulate* c = new Add;
//	c->m_Num1 = 10;
//	c->m_Num2 = 5;
//	cout << c->GetResult() << endl;
//	delete c;
//	c = new Sub;
//	c->m_Num1 = 10;
//	c->m_Num2 = 5;
//	cout << c->GetResult() << endl;
//}
//int main()
//{
//	test();
//}
