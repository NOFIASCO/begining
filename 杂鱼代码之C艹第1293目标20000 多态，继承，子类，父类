#include <iostream>
using namespace std;
class Cpu
{
public:
	virtual void caclulate() = 0;
};
class VideoCard
{
public:
	virtual void display() = 0;
};
class Memory
{
public:
	virtual void storage() = 0;
};
class Computer
{
public:
	Computer(Cpu* u, VideoCard* vc, Memory* mem)
	{
		U = u;
		Vc = vc;
		Mem = mem;
	}
	void Work()
	{
		U->caclulate();
		Vc->display();
		Mem->storage();
	}
	~Computer()
	{
		if (U != NULL)
		{
			delete U;
			U = NULL;
		}
		if (Vc != NULL)
		{
			delete Vc;
			Vc = NULL;
		}
		if (Mem != NULL)
		{
			delete Mem;
			Mem = NULL;
		}
	}
private:
	Cpu* U;
	VideoCard* Vc;
	Memory* Mem;
};
class IntelCpu :public Cpu
{
public:
	virtual void caclulate()
	{
		cout << "Icac" << endl;
	}
};
class IntelDisplayCard :public VideoCard
{
public:
	virtual void display()
	{
		cout << "Idis" << endl;
	}
};
class IntelMemory :public  Memory
{
public:
	virtual void storage()
	{
		cout << "Imem" << endl;
	}
};
class AmdCpu :public Cpu
{
public:
	virtual void caclulate()
	{
		cout << "Acac" << endl;
	}
};
class AmdVideoCard :public VideoCard
{
public:
	virtual void display()
	{
		cout << "Adis" << endl;
	}
};
class AmdMemory :public  Memory
{
public:
	virtual void storage()
	{
		cout << "Amem" << endl;
	}
};
void test()
{
	Cpu* intelCpu = new  IntelCpu;
	VideoCard* intelVideocard = new IntelDisplayCard;
	Memory* intelMemory = new IntelMemory;
	Computer* computer1 = new Computer(intelCpu, intelVideocard, intelMemory);
	computer1->Work();
	delete computer1;
}
void test01()
{
	Cpu* AmdU = new AmdCpu;
	VideoCard* AmdC = new AmdVideoCard;
	AmdMemory* AmdM = new AmdMemory;
	Computer* computer2 = new Computer(AmdU, AmdC, AmdM);
	computer2->Work();
	delete computer2;
}
int main()
{
	test01();
	test();
	system("pause");
	return 0;
}
//class AbstractDrinking
//{
//public:
//	virtual void Boil() = 0;
//	virtual void Brew() = 0;
//	virtual void PourInCup() = 0;
//	virtual void PutSomething() = 0;
//	void MakeDrink()
//	{
//		Boil();
//		Brew();
//		PourInCup();
//		PutSomething();
//	}
//};
//class coffe:public AbstractDrinking
//{
//	virtual void Boil()
//	{
//		cout << "煮水" << endl;
//	}
//	virtual void Brew()
//	{
//		cout << "冲泡咖啡" << endl;
//	}
//	virtual void PourInCup()
//	{
//		cout << "倒入" << endl;
//	}
//	virtual void PutSomething()
//	{
//		cout << "加入辅料" << endl;
//	}
//};
//class tea :public AbstractDrinking
//{
//	virtual void Boil()
//	{
//		cout << "煮水" << endl;
//	}
//	virtual void Brew()
//	{
//		cout << "冲泡茶" << endl;
//	}
//	virtual void PourInCup()
//	{
//		cout << "倒入" << endl;
//	}
//	virtual void PutSomething()
//	{
//		cout << "加入辅料" << endl;
//	}
//};
//void DoWork(AbstractDrinking* abs)
//{
//	abs->MakeDrink();
//	delete abs;
//}
//void test()
//{
//	DoWork(new coffe);
//}
//void test01()
//{
//	DoWork(new tea);
//}
//int main()
//{
//	test();
//	test01();
//	system("pause");
//	return 0;
//}
//class person
//{
//public:
//	person()
//	{
//		cout << "person默认构造函数调用" << endl;
//	}
//	person(const person& p)
//	{
//		cout << "拷贝构造函数调用" << endl;
//		Age = p.Age;
//	}
//	person(int age)
//	{
//		cout << "有参构造函数调用" << endl;
//		Age = age;
//	}
//	~person()
//	{
//		cout << "person析构函数调用" << endl;
//	}
//	int Age;
//}; 
//void test01()
//{
//	person p1(20);
//	person p2(p1);
//}
//int main()
//{
//	test01();
//	system("pause");
//	return 0;
//}
